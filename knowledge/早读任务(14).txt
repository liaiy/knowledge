day02早读任务：
1. 变量名的命名规则？(7条)

   ```
   1.由数字、字母、下划线组成
   2.数字不能开头
   3.不能使用python内置关键字作为变量名
   4.使用大驼峰、小驼峰、下划线命名法
   5.避免单独使用l/o/z作为变量名
   6.严格区分大小写
   7.见名识意
   ```

   

2. 掌握的数据类型转换有哪些？

  ```
  将数据转换成整型int()
  将数据装换成浮点型float()
  将数据转换成字符串str()
  ```

3.如何查询数据的类型及数据的布尔类型值？

```
查询数据类型  type(数据)
查询数据的布尔类型值bool(数据)
```

day03早读任务：
1. break和continue的异同点？

  ```
  相同点：
  作用范围：两者都只能在循环结构中使用
  控制循环流程：break和continue都能够改变当前循环的默认执行流程
  影响迭代:改变循环内的数据迭代元素的数量或顺序
  不同点：
  break是立即结束最内层的循环，即使循环条件仍然为真。程序执行循环之后的语句。
  continue不会终止循环，而是跳过当前迭代，并立即开始下次迭代，程序会跳过当前迭代中剩余的语句，
  
  break和continue关键字在循环语句中的异同点总结如下：
  相同点：
  1. 作用范围：两者都只能在循环结构中使用，如for、while和do...while循环。
  2. 控制循环流程：二者都是用来改变循环正常执行顺序的关键字，即非正常情况下中断或调整循环行为。
  不同点：
  break：
  1. 功能：break语句用于立即终止当前所在的整个循环结构，无论是单层循环还是嵌套循环中的某一层。执行break后，循环结构后面的代码（循环体之外）会继续执行。
  2. 效果：一旦满足break语句的触发条件，循环将不再进行任何后续的迭代，包括当前未完成的迭代和剩余的所有迭代。这意味着循环条件是否成立、循环体中剩余的语句都将被忽略。
  3. 应用场景：常用于在达到某个特定条件（如找到所需结果、检测到错误状态等）时，提前结束循环，避免不必要的计算或避免无限循环。
  continue：
  1. 功能：continue语句用于跳过当前循环迭代的剩余部分，直接进入下一次循环的迭代。它不会终止整个循环，只是结束当前这一次迭代。
  2. 效果：当continue被执行时，当前循环体中位于continue之后的语句将被忽略，控制流立即返回循环的开始处，重新评估循环条件，如果条件依然成立，则执行下一次迭代。
  3. 应用场景：通常在满足特定条件（如需要忽略某些数据、检测到临时不需要处理的情况等）时，避免执行当前循环剩余的部分，但允许循环继续进行后续的迭代。
  总结：
  •break用于彻底结束整个循环，不再执行任何后续迭代。•continue用于跳过当前循环迭代的剩余部分，循环继续进行下一次迭代。•break适用于需要提前终止循环的场景，例如找到期望结果或检测到退出条件。•continue适用于需要略过当前迭代中某些处理步骤，但继续执行循环其余迭代的场景。通过合理使用break和continue，程序员可以更精细地控制循环的行为，提高代码效率，或者处理特定条件下的逻辑分支。
  ```

  

  相同点
  控制循环流程：break和continue都用于改变循环（如for或while）的默认执行流程。
  影响迭代：它们都可以影响循环中迭代元素的数量或顺序。
  不同点
  终止循环：
  break会立即终止最内层的循环，即使循环条件仍然为真。
  continue不会终止循环，而是跳过当前迭代，并立即开始下一次迭代。
  后续执行：
  当break被执行后，循环将不再继续，程序将继续执行循环之后的语句。
  当continue被执行后，当前迭代剩余的语句将被跳过，程序将立即开始下一次迭代。


day04早读任务：
1. 字符串概念及索引切片语法？

   ```
   由一系列字符组成的不可变序列容器
   索引及切片语法：  
   	索引：str[下标]
   	切片：str1[开始下标：结束下标：步长]
   ```

   

day05早读任务：
1.字符串方法及作用？(至少5个)

```
字符串方法：  字符串名.strip()  ………………
			字符串名.replace()………………
			字符串名.split()………………
			字符串名.capitalize()………………
			字符串名.title()………………
			
```

2.字符串输入函数及注意事项？

```
输入函数：input('提示语')
注意事项：input接收到的数据一定是字符串类型的数据
```

​	语法：input("提示语")
​	注意：input接收过来的数据一定是字符串类型的数据

day06早读任务：
1. 列表增加数据的三种方式及其作用？

  ```
  列表增加数据的三种方式：
  1.append()  列表名.append(元素),将要增加的元素添加到列表尾部
  2.insert()  列表名.append(下标)，将要增加的数据添加到给定下标的前一位
  3.extend() 列表名.append(iterable)，将要增加的数据拆分后依次添加到列表尾部
  ```

  2.列表删除数据的方法及作用？

  ```
  列表删除数据的方法及作用：
  1.pop() 列表名.append(下标)，删除给定下标位置的数据,并返回被删除的元素，不给参数默认删除列表的最后一位
  2.remove() 列表名.append(元素)，删除列表中第一个出现的指定的元素，元素不存在则会报错
  3.clear() 列表名.append(元素)，清空整个列表中的元素，只留下一个空列表
  4.del del 元素 list 列表名[下标] ,可以删除整个列表，也可以删除列表中的指定位置元素
  
  ```

  43.字典循环遍历的三种方式？
  遍历字典的键
  for i in dict1.keys():
  	print(i)
  遍历字典的值
  for i in dict1.values():
  	print(i)
  遍历字典的键值对
  for i,j in dict1.items():
  	print(i,j)

2. in 和 not in 的语法及作用？
    in：
    语法：元素 in 数据
    作用：判断元素是否在数据内存在，如果在则返回True，否则返回False
    not in：
    语法：元素 not in 数据
    作用：判断元素是否在数据内不存在，如果不在则返回True，否则返回False

5.字典增加和修改的语法格式及特点？

```
语法：字典名[键]=值
特点：有则更改，无则增加
```

​	语法：字典名[键] = 值
​	特点：有则修改，无则增加

day07早读任务：
1.python中的内置函数有哪些，及其作用？

```
max()返回参数的最大值
min()返回参数的最小值
len()统计序列的长度、统计序列中数据的个数
print()输出函数，用于打印信息
input() 输出函数，用于获取用户信息或其他数据
del()删除指定数据
sum()返回参数的和
```

​	sum():对序列进行求和
​	len():统计序列的长度、统计序列中数据的个数
​	max():返回参数的最大值
​	min():返回参数的最小值
​	del():删除指定数据

2.python中可变不可变数据类型有哪些？

```
可变：列表、字典、集合
不可变：整型、浮点型、元组、字符串
```

​	可变：列表、集合、字典
​	不可变：数字、字符串、元组

day08早读任务：
1.对全局变量和局部变量的理解：

```
	全局变量：定义在函数外，在函数外和函数内都能使用，全局变量的生命周期是整个程序的运行期间，也就是说，只要程序一直运行，全局变量就会一直存在
	局部变量：定义在函数内，只能在函数内使用，局部变量的生命周期是从他所在的函数被调用时开始，到函数返回时结束。
```

​	全局变量：定义在函数外，在函数外和函数内都能使用的变量，全局变量的生命周期是整个程序的运行期间，也就是说只要程序没有结束运行，全局变量就会一直存在。
​	局部变量：定义在函数内，只能在函数内使用，不能在函数外使用，局部变量的生命周期是它们所在的函数被调用时开始，到函数返回时结束。

2.拆包注意事项和可拆包的数据类型？

```
注意事项：要拆的数据个数要与变量的个数相同，否则程序会异常
可拆包的数据类型：字符串，字典（拆包后获取的数据是字典的键），元组，列表
```

​	拆包时需要注意：要拆的数据的个数要与变量的个数相同，否则程序会异常
​	可拆包的数据类型：字符串、列表、元组、字典(拆包之后获取到的数据为字典的键)

3.对不定长参数的理解？

```
不定长参数：允许函数或方法接受任意数量的参数。在Python中，不定长参数有两种形式：不定长位置参数（*args）和不定长关键字参数（**kwargs）。使用加了星号*的变量args来存放所有未命名的变量参数，args是一个元组，使用**kwargs来存放命名参数，即形如key=value 的参数，kwargs是字典
```

​	加了星号（*）的变量args会存放所有未命名的变量参数，args为元组
​	而加**的变量kwargs会存放命名参数，即形如key=value的参数， kwargs为字典

4.return的理解？

```
return 
作用：结束当前函数的执行；返回值给调用该函数的代码，return可以出现在函数的任意位置，一旦执行到return，函数就会理解终止，并返回return之后的数据给调用者，这个数据可以是任意的数据类型，如果return之后没有跟任何值，或函数之中没有return语句，函数就会默认返回None;

```

​	return语句的主要作用是结束当前函数的执行，并返回一个值给调用该函数的代码。return语句可以出现在函数体的任何位置，一旦执行到return语句，函数就会立即终止，并将return后面跟着的值（如果有的话）返回给调用者。
这个值可以是任何Python数据类型，包括整数、浮点数、字符串、列表、字典等。如果return后面没有跟任何值，或者函数体中没有return语句，那么函数会默认返回None



day10早读任务：
1. 对正则模块贪婪匹配和非贪婪的理解？
	
	```
	贪婪模式:正则表达式一般趋向于最大长度匹配，即尽可能多的匹配字符，一般将+写在匹配次数的位置
	非贪婪模式：匹配到结果就好，尽可能少的匹配字符，一般使用?写在匹配次数之后
	
	
	```
	
	贪婪模式：正则表达式一般趋向于最大长度匹配，也就是所谓的贪婪匹配，尽可能匹配多的字符。
	非贪婪模式：匹配到结果就好，尽可能匹配少的字符，一般是通过将?号写到匹配次数之后导致

2.列举正则模块方法及作用？

``` 
正则模块方法:
1.re.match()   从字符串开头开始匹配，一旦起始位置匹配成功就会立刻返回对象，匹配失败返回None;可以通过group方法获取匹配成功的数据，匹配失败则会报错
2.re.search() 在字符串的任意位置开始匹配，一旦匹配成功就会立刻返回对象，，匹配失败返回None;可以通过group方法获取匹配成功的数据，匹配失败则会报错
3.re.findall()  匹配字符串中所有符合条件的数据， 存放在列表中返回，如果没有符合条件的数据，则会返回一个空列表
```

​	findall():匹配字符串中所有符合条件的数据，存放在列表中返回；如果没有符合条件的数据，返回一个空列表
​	match():从字符串开头开始匹配；一旦匹配成功立马返回对象，匹配失败返回None；通过group方法获取匹配成功的数据，匹配失败会报错
​	search():从字符串任意位置开始匹配；一旦匹配成功立马返回对象，匹配失败返回None；通过group方法获取匹配成功的数据，匹配失败会报错



day11早读任务：
1.导包的两种方式？

```
import 模块名  使用方法：模块名.方法名（）
from 模块名 import 方法名  使用方法：方法名（）
```

​	import 模块名     模块名.方法名()
​	from 模块名 import 方法名     方法名()

2.time模块中的方法及作用？

```
time.time()  获取当前时间戳
time.sleep(n)  暂时停止程序的执行n秒，n可以是整型，也可以是浮点型
```

​	time.time()：获取当前时间戳
​	time.sleep(n)：阻塞程序，让程序休眠n秒

3.random模块中的方法及作用？

```
andom模块中的方法及作用
1： random.random() 随机生成一个0-1之间的一个小数
2:  random.randint(a,b) 随机生成一个a-b之间的一个整数，包含a,b
3：  random.randchoice(可迭代对象) 随机获取可迭代对象中的一个元素
```

​	random.random()：生成0-1之间的随即小数
​	random.randint(a,b)：生成a-b之间的随机整除，包括a和b
​	random.choice(可迭代对象)：从可迭代对象中随机抽取一个元素



day12早读任务：
1.对文件操作的理解？

```
open()打开文件
close（） 关闭文件
read(n)  一次性读取文件中的n个字节的内容，不写n默认读取全部内容
readlines() 一次性读取文件中的全部内容，存在列表中，每一项是文件的每一行
readline() 一次性读取文件中一行内容，如果读取到空字符串，说明文件中全部内容读取结束
write() 向文件中添加数据，数据的类型是字符串
```

​	open():打开文件
​	close():关闭文件
​	read(n):一次性读取n个字节的数据；不指定参数n，默认读取全部
​	readline():一次性读取一行数据，如果读取到空字符串，说明文件中内容读取结束
​	readlines()：以列表的形式一次性读取文件中所有的内容；列表的每一项是文件的每一行
​	write(数据)：往文件中写入数据，数据要求是字符串类型的数据

2.文件常用访问模式

```
r ；只读，默认访问模式，如果文件不存在则报错
w: 只写，如果文件不存在则创建文件，如果文件存在且有数据，则会覆盖掉原来的数据
a: 追加，如果文件不存在则创建文件，如果文件存在且有数据，则会将新加入的数据添加到原来数据的尾部
```

​	r：只读，默认访问方式；如果文件不存在则报错
​	w：只写，如果文件不存在则创建文件；如果文件存在且有数据，则覆盖原本的数据
​	a：追加，如果文件不存在则创建文件；如果文件存在且有数据，则原本数据后进行追加

day13早读任务：
1.对self和cls的理解？

```
self :实例对象本身
cls: 类对象本身
```

​	self：实例对象本身
​	cls：类对象本身

2.列举python中的魔法方法及其作用：

```
魔法方法：
1.__new__  类的构造器，创建初始化后的基本实例对象，为实例对象创建内存地址，
2.__init__ 类的初始化方法，给实例对象增加实例属性
3.__str__ 返回实例对象的描述信息
4.__del__在实例对象被销毁前调用，释放资源
```

​	__new__：类的构造器，创建初始化后的基本实例对象
​	__init__：类的初始化方法，给实例对象增加实例属性
​	__str__：返回实例对象的描述信息
​	__del__：在实例对象被销毁前被调用，释放资源

3.请简述Python中类的定义方式，并说明类的作用？

```
在python中，类的定义使用class关键字。类是对具有相同属性和相同方法的对象的抽象描述，它定义了对象的属性和方法，使得我们可以创建具有相同特征和行为的多个对象。类的作用在于封装数据和行为，实现代码的重用和模块化。
```

​	在Python中，类的定义使用class关键字。类是对具有相同属性和方法的对象的抽象描述，它定义了对象的属性和方法，使得我们可以创建具有相同特征和行为的多个对象。类的作用在于封装数据和行为，实现代码的重用和模块化。

day14早读任务：
1.面向对象三要素(三大特征)：

```
继承：子类继承父类，子类具有父类的属性和方法，提高代码的重用性
封装：隐藏对象的属性和实现细节，仅对外提供公共访问方式；通过私有属性和私有方法实现封装
多态：不同的对象调用父类相同的方法，产生不同的执行结果，提高代码的灵活度
	多态存在的两个必要条件：继承和方法重写
```

继承：
	子类继承父类，子类拥有父类的属性和方法，提高代码的重用性
封装：
	隐藏对象的属性和实现细节，进对外提供公共访问方式；通过私有属性和私有方法实现封装
多态：
	不同的对象调用父类相同的方法，产生不同的执行结果，提供代码的灵活度
	多态存在的两个必要条件：继承和方法重写

2.实例方法、类方法、静态方法的区别：

```
定义、参数、谁来调用
内部访问（实例属性、类属性、）
```

实例方法：
	直接定义即可，第一个参数必须是实例对象self，需要实例对象进行调用；
	内部可以访问类属性(类属性通过类名.属性名的方式访问)和实例属性；
类方法：
	定义需要使用@classmethod装饰器，第一个参数必须是类对象cls，类对象和实例对象都能调用；
	内部可以访问类属性  cls.属性名的方式就可以访问
静态方法：
	定义需要使用@staticmethod装饰器，方法不携带self和cls参数，类对象和实例对象都能调用；
	内部不能访问类属性，也不能访问实例属性；只能访问自己内部的局部变量

3.多继承继承顺序的理解？

```
.多继承就是继承2个及以上的父类，通过mro方法实现继承顺序的查找，用来确定在多重继承的情况下，子类查找父类同名方法的顺序。
```



多继承就是继承2个及以上的父类，使用mro方法实现继承顺序的查找，用来确定在多继承情况下，子类查找父类同名方法的顺序

4.super()函数的理解

```
在python中，当一个类继承自另一个类时，子类可以通过super()函数调用父类的方法，通过使用super（）函数，子类可以继承父类的行为，并且可以在子类中进行一些额外的操作，好处是可以避免在自雷中重复编写父类的代码，提高代码的复用性，super（）函数还可以处理多重继承的情况，确保方法的调用顺序是按照继承顺序来的。
```

在Python中，当一个类继承自另一个类时，子类可以通过super函数调用父类的方法
super函数的作用是在子类中调用父类的方法。通过使用super函数，子类可以继承父类的行为，并且可以在子类中进行一些额外的操作
使用super函数的好处是可以避免在子类中重复编写父类的代码，提高代码的复用性。super函数还能够处理多重继承的情况，确保方法的调用顺序是按照继承顺序来的。





day15早读任务：
1.谈谈对python中引用计数的理解​
	引用计数法的原理是每个对象维护一个ob_ref，用来记录当前对象被引用的次数，当指向该对象的内存的引用计数器为0的时候，该内存将会被Python虚拟机销毁，缺点是维护引用计数消耗资源，无法解决循环引用的问题。

2.谈谈对python中标记清除的理解
	它分为两个阶段：第一阶段是标记阶段，GC会把所有的『活动对象』打上标记，第二阶段是把那些没有标记的对象『非活动对象』进行回收。

3.谈谈对python中分代回收的理解
	Python将内存分为了3“代”，分别为年轻代（第0代）、中年代（第1代）、老年代（第2代），他们对应的是3个链表，新创建的对象都会分配在年轻代，年轻代链表的总数达到上限时，Python垃圾收集机制就会被触发，把那些可以被回收的对象回收掉，而那些不会回收的对象就会被移到中年代去，依此类推。分代回收是建立在标记清除技术基础之上

4.对深浅拷贝的理解？
	浅拷贝：只拷贝第一层数据，深层数据仍然是指向关系
	深拷贝：完全拷贝，原数据与拷贝之后的数据没有任何关系


day16早读任务：
1. 迭代器的功能？
	返回可迭代对象中的数据
	记录当前迭代位置
	迭代完成再次迭代抛出停止迭代的异常